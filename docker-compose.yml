# Docker compose para desenvolver uma aplicação com Nginx, Node.js e React.
# services:
#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     image: backend:01
#     container_name: backend_container
#     ports:
#       - 5000:5000
#     environment:
#       - NODE_ENV=development
#       - CHOKIDAR_USEPOLLING=true
#     volumes:
#       - ./backend:/app
#       - /app/node_modules
#     networks:
#       - mononoke_network

#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     image: frontend:01
#     container_name: frontend_container
#     ports:
#       - 3000:3000
#     env_file:
#       - ./frontend/.env
#     environment:
#       - CHOKIDAR_USEPOLLING=true
#       - WATCHPACK_POLLING=true
#     volumes:
#       - ./frontend:/app:cached
#     networks:
#       - mononoke_network
#     depends_on:
#       - backend

#   nginx:
#     build:
#       context: ./nginx
#       dockerfile: Dockerfile
#     image: nginx:01
#     container_name: nginx_container
#     ports:
#       - 80:80
#       - 443:443
#     volumes:
#       - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
#       - ./nginx/certs/nginx-selfsigned.crt:/etc/nginx/certs/nginx-selfsigned.crt  # Adicionando o volume para o certificado
#       - ./nginx/certs/nginx-selfsigned.key:/etc/nginx/certs/nginx-selfsigned.key # Adicionando o volume para a chave privada
#     networks:
#       - mononoke_network
#     depends_on:
#       - frontend
#       - backend
#     command: /bin/bash -c "wait-for-it frontend:3000 -- wait-for-it backend:5000 -- nginx -g 'daemon off;'"

# networks:
#    mononoke_network:
#     name: mononoke_network
#     driver: bridge

# # -----------------------------------------------------------------------------------------

# Docker Compose file for a production setup with Nginx, Node.js, and React.
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: backend:prod
    container_name: backend_container
    environment:
      - NODE_ENV=production
    env_file:
      - ./backend/.env
    ports:
      - "5000:5000"
    networks:
      - mononoke_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend:prod
    container_name: frontend_container
    environment:
      - NODE_ENV=production
    env_file:
      - ./frontend/.env

    ports:
      - "3000:3000"
    networks:
      - mononoke_network
    restart: unless-stopped
    depends_on:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx:prod
    container_name: nginx_container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs/nginx-selfsigned.crt:/etc/nginx/certs/nginx-selfsigned.crt:ro
      - ./nginx/certs/nginx-selfsigned.key:/etc/nginx/certs/nginx-selfsigned.key:ro
    networks:
      - mononoke_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    command: ["nginx", "-g", "daemon off;"]

networks:
  mononoke_network:
    driver: bridge
